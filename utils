#!/bin/sh

create_dir() {
    local dirPath=${1}

    info "creating dir: $dirPath"
    mkdir -p $dirPath
}

create_file() {
    local filePath=${1}
    local fileContent=${2}

    info "creating file: $filePath"
    touch $filePath
    chmod +x $filePath

    echo "$fileContent" >> $filePath
}

request_accept() {
    ask() {    
        printf "Do you really want to do this? (y/n): "
    }

    if [[ -z $YES_MODE ]]; then
        ask
        while true; do
            read input
            uppercase_input=${input^^}
            
            case $uppercase_input in
                YES|Y)
                    return 0
                    break
                ;;
                NO|N)
                    echo "Operation cancelled"
                    return 1
                    break
                ;;
                *)
                    if [[ $uppercase_input == '' ]]; then
                        echo "Operation cancelled"
                        return 1
                        break
                    fi
                    echo "error: wrong response. Please answer with yes or no"
                    ask
                ;;
            esac
        done
    fi
}

info() {
    if [[ $VERBOSE_MODE ]]; then
        echo $@
    fi
}

find_help() {
    local help_target=${1}
    local help_file="./help_messages.md"

    if [ ! -f "$help_file" ]; then
        echo "error: help messages files is not avaliable"
        exit 0
    fi

    text=$(cat $help_file)

    if [[ $text =~ \[group-start\]:\ \<\>\ \($help_target\) ]]; then
        extracted_text=$(echo "$text" | sed -n "/\[group-start\]: <> ($help_target)/,/\[group-end\]: <> ($help_target)/ { /(\[group-start\]|\[group-end\]): <> ($help_target)/!p }" | sed '1d;$d')
        echo "$extracted_text"
    else
        echo "error: cannot find '$help_target' help message"
    fi
}

man_help() {
    for ((i=0; i<=${#@}; i++)); do
        case ${@:i:1} in
            --help | -h)
                last_argument=$((i - 1))
                echo ${@:$last_argument:1}
                break
            ;;
        esac
    done
}

isNumber() {
    local value=${1}
    local regex='^[+-]?[0-9]+([.][0-9]+)?$'

    if [[ $value =~ $regex ]]; then
        return 1
    else
        return 0
    fi
}

has_outrun() {
    local max_arguments=${1}
    shift
    local num_arguments=$#

    if isNumber $max_arguments; then
        echo "error: the provided value '$max_arguments' is not a number"
        exit 0
    fi

    if [ $max_arguments -ge $# ]; then
        return 1
    else
        return 0
    fi
}
